#!/usr/bin/env python3
"""Module for generating a summary report from various fusion detection tools."""
import argparse
from time import sleep
from fusion_report.lib.db import Db
from fusion_report.lib.page import Page
from fusion_report.lib.report import Report
from fusion_report.lib.section import Section
from fusion_report.lib.graph import Graph
from fusion_report.lib.tool_parser import ToolParser
from fusion_report.core import tool_detection_chart, known_vs_unknown_chart, \
    distribution_chart, create_fusions_table, create_ppi_graph, print_progress_bar, \
    get_db_fusions

# Minimum number of tools that have to detect a fusion, used as a filter in Dashboard
TOOL_DETECTION_CUTOFF = 2
SUPPORTED_TOOLS = ['ericscript', 'starfusion', 'fusioncatcher', 'pizzly', 'squid']
DEFAULT_TOOL_WEIGHT = float(100/len(SUPPORTED_TOOLS))

def parse(params):
    """
    Function calling parser of individual tool.

    Args:
        params (ArgumentParser):
    """
    tools = ToolParser()
    for tool in SUPPORTED_TOOLS:
        tools.parse(tool, params.__dict__[tool])

    return tools

def generate_index(params, parser):
    """
    Helper function for generating index.html page.

    Args:
        params (ArgumentParser)
        parser (ToolParser)
    Returns:
        Page: Returns final Page object for index.html page.
    """
    known_fusions, unknown_fusions = parser.get_db_counts()
    index_page = Page(
        title='index',
        page_variables={
            'sample': params.sample,
            'fusions_sum': int(unknown_fusions + known_fusions),
            'known_fusion_sum': known_fusions,
            'fusion_tools': parser.get_tools()
        },
        partial_template='index'
    )

    dashboard_section = Section(
        section_id='dashboard',
        title='Dashboard fusion summary'
    )
    dashboard_section.add_graph(
        Graph(
            'tool_detection_chart',
            'Tool detection',
            'Displays number of found fusions per tool.',
            tool_detection_chart(parser.get_tools_count(), parser.get_tools())
        )
    )
    dashboard_section.add_graph(
        Graph(
            'known_vs_unknown_chart',
            'Known Vs Unknown',
            'Shows the ration between found and unknown missing fusions in the local database.',
            known_vs_unknown_chart(known_fusions, unknown_fusions)
        )
    )
    dashboard_section.add_graph(
        Graph(
            'distribution_chart',
            'Tool detection distribution',
            'Sum of counts detected by different tools per fusion.',
            distribution_chart(parser.get_fusions(), parser.get_tools())
        )
    )
    index_page.add_section(dashboard_section)

    fusion_list_section = Section(
        section_id='fusion_list',
        title='List of detected fusions',
        content='''
            Filters fusions found by at least {tool} tools. If number of chosen tools is less 
            than {tool} the filter is disabled. The whole list can be found in 
            <code>./Report-{sample}/fusions.json</code>.
            '''.format(tool=str(params.tool_num), sample=str(params.sample))
    )
    fusion_list_section.data = create_fusions_table(
        parser.get_fusions(),
        parser.get_tools(),
        params
    )
    index_page.add_section(fusion_list_section)

    return index_page

def generate_fusion_page(params, parser, fusion, db):
    """
    Helper function for generating <fusion>.html page.

    Args:
        params (ArgumentParser)
        parser (ToolParser)
        fusion (str): name of the fusion geneA--geneB
        db (Db)
    Returns:
        Page: Returns final Page object for <fusion>.html page.
    """
    db.connect('fusiongdb')
    fusion_page = Page(
        title=fusion,
        page_variables={
            'sample': params.sample,
        },
        partial_template='fusion'
    )
    fusion_pair = fusion.split('--')
    detail_section = Section(
        section_id='details',
        title='Detail results from fusion detection tools',
        content='Some description for each tool?'
    )
    detail_section.data = parser.get_fusion(fusion).__dict__
    fusion_page.add_section(detail_section)
    # Variations section
    variations_section = Section(
        section_id='variations',
        title='Fusion gene variations',
        content='''
            Fusion gene information taken from three different sources ChiTars (NAR, 2018), 
            tumorfusions (NAR, 2018) and Gao et al. (Cell, 2018). Genome coordinates are 
            lifted-over GRCh37/hg19 version. <br>Note: LD (Li Ding group, RV: Roel Verhaak group, 
            ChiTaRs fusion database).
        '''
    )
    variations_section.data = db.select(
        '''
        SELECT * FROM TCGA_ChiTaRS_combined_fusion_information_on_hg19
        WHERE h_gene = ? AND t_gene = ?''',
        fusion_pair
    )
    fusion_page.add_section(variations_section)

    transcripts_section = Section(
        section_id='transcripts',
        title='Ensembl transcripts',
        content='''
            Open reading frame (ORF) analsis of fusion genes based on Ensembl gene 
            isoform structure.
        '''
    )
    transcripts_section.data = db.select(
        '''
        SELECT * FROM TCGA_ChiTaRS_combined_fusion_ORF_analyzed_gencode_h19v19
        WHERE h_gene = ? AND t_gene = ?''',
        fusion_pair
    )
    fusion_page.add_section(transcripts_section)

    ppi_section = Section(
        section_id='ppi',
        title='Chimeric Protein-Protein interactions',
        content='''
            Protein-protein interactors with each fusion partner protein in wild-type.
            Data are taken from <a href="http://chippi.md.biu.ac.il/index.html">here</a>
        '''
    )
    ppi_section.data = db.select(
        '''
        SELECT DISTINCT h_gene, h_gene_interactions, t_gene, t_gene_interactions
        FROM fusion_ppi WHERE h_gene = ? AND t_gene = ?''',
        fusion_pair
    )
    ppi_section.add_graph(
        Graph(
            'ppi_graph',
            'Network graph of gene interactions',
            '',
            create_ppi_graph(ppi_section.data)
        )
    )
    fusion_page.add_section(ppi_section)

    drugs_section = Section(
        section_id='targeting_drugs',
        title='Targeting drugs',
        content='''
            Drugs targeting genes involved in this fusion gene 
            (DrugBank Version 5.1.0 2018-04-02).
        '''
    )
    drugs_section.data = db.select(
        '''
        SELECT gene_symbol, drug_status, drug_bank_id, drug_name, drug_action,
        fusion_uniprot_related_drugs.uniprot_acc FROM fusion_uniprot_related_drugs
        INNER JOIN uniprot_gsymbol
        ON fusion_uniprot_related_drugs.uniprot_acc = uniprot_gsymbol.uniprot_acc
        WHERE gene_symbol = ? OR gene_symbol = ?
        ''',
        fusion_pair
    )
    fusion_page.add_section(drugs_section)

    diseases_section = Section(
        section_id='related_diseases',
        title='Related diseases',
        content='Diseases associated with fusion partners (DisGeNet 4.0).'
    )
    diseases_section.data = db.select(
        '''
        SELECT * FROM fgene_disease_associations
        WHERE (gene = ? OR gene = ?)
        AND disease_prob > 0.2001 ORDER BY disease_prob DESC''',
        fusion_pair
    )
    fusion_page.add_section(diseases_section)

    return fusion_page

def generate_report(params):
    """
    Main function for generating report.

    Args:
        params (ArgumentParser)
    """
    i = 0
    parser = parse(params)
    db = Db(params.db_path)
    fusions = parser.get_fusions()
    db_fusions = get_db_fusions(db)

    report = Report(params.config, params.output)
    print_progress_bar(0, len(fusions), 50)

    for fusion, detail in fusions:
        i += 1
        for db_name, db_list in db_fusions.items():
            if fusion in db_list:
                detail.add_db(db_name)

        if 'FusionGDB' in detail.dbs:
            fusion_page = generate_fusion_page(params, parser, fusion, db)
            report.add_page(fusion_page)

        # progress bar
        sleep(0.1)
        print_progress_bar(i, len(fusions), 50)

    index_page = generate_index(params, parser)
    report.add_page(index_page)
    parser.save(params.output, 'fusions')
    print(f'The report for `sample` {params.sample} was generated in {params.output}.')

def main():
    """Main function for processing command line arguments"""
    parser = argparse.ArgumentParser(
        description='''
            Tool for generating friendly UI custom report. 
            Supported tools are: {0} and {1}.
        '''.format(', '.join(SUPPORTED_TOOLS[:-1]), SUPPORTED_TOOLS[-1])
    )
    mandatory = parser.add_argument_group('Mandatory arguments', 'Required arguments to run app.')
    mandatory.add_argument(
        'sample',
        help='Sample name',
        type=str
    )
    mandatory.add_argument(
        'output',
        help='Output directory',
        type=str
    )
    mandatory.add_argument(
        'db_path',
        help='Path to folder where all databases are stored.',
        type=str
    )
    tools = parser.add_argument_group('Tools', 'List of all supported tools with their weights.')
    tools.add_argument(
        '--ericscript',
        help='EricScript output file',
        type=str
    )
    tools.add_argument(
        '--ericscript_weight',
        help='EricScript weight',
        type=float,
        default=DEFAULT_TOOL_WEIGHT
    )
    tools.add_argument(
        '--fusioncatcher',
        help='FusionCatcher output file',
        type=str
    )
    tools.add_argument(
        '--fusioncatcher_weight',
        help='FusionCatcher weight',
        type=float,
        default=DEFAULT_TOOL_WEIGHT
    )
    tools.add_argument(
        '--starfusion',
        help='STAR-Fusion output file',
        type=str
    )
    tools.add_argument(
        '--starfusion_weight',
        help='STAR-Fusion weight',
        type=float,
        default=DEFAULT_TOOL_WEIGHT
    )
    tools.add_argument(
        '--pizzly',
        help='Pizzly output file',
        type=str
    )
    tools.add_argument(
        '--pizzly_weight',
        help='Pizzly weight',
        type=float,
        default=DEFAULT_TOOL_WEIGHT
    )
    tools.add_argument(
        '--squid',
        help='Squid output file',
        type=str
    )
    tools.add_argument(
        '--squid_weight',
        help='Squid weight',
        type=float,
        default=DEFAULT_TOOL_WEIGHT
    )
    optional = parser.add_argument_group('Optional', 'List of additional configuration parameters.')
    optional.add_argument(
        '-c', '--config',
        help='Input config file',
        type=str,
        required=False
    )
    optional.add_argument(
        '-t', '--tool_num',
        help='Number of tools required to detect a fusion',
        type=int,
        default=TOOL_DETECTION_CUTOFF
    )
    generate_report(parser.parse_args())

if __name__ == "__main__":
    main()
